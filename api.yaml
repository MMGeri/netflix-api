openapi: '3.0.0'
info:
  version: 1.0.0
  title: Netflix-API
  description: Netflix API
tags:
  - name: Users
  - name: Videos
    description: video specific actions like queues, videos
  - name: Admin
    description: actions only admins can do
paths:
  /users:
    post:
      description: |
        creates a user
      operationId: userCreate
      x-eov-operation-handler: api/controllers/user.controller
      tags:
        - Users
      requestBody:
        description: User to create
        required: true
        content:
          text/plain:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
            example:
              username: mgeri
              password: asdfghjkl1234
      responses:
        '201':
          description: User was created succesfuly and returned a user with an id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Password doesn't conform to the specifications
        '409':
          description: Conlict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 409
                message: User with given username already exists
        default:
          description: unexpected error happened, for example internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/login:
    post:
      description: |
        logs in a user and returns the user object
      operationId: userLogin
      x-eov-operation-handler: api/controllers/user.controller
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        description: User information
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
      responses:
        '200':
          description: returns a session id
          content:
            application/json:
              schema:
                type: object
                properties:
                  session-id:
                    type: string
                    description: the session id
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: User does not exist
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: Password is incorrect
        default:
          description: unexpected error happened, for example internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/logout:
    get:
      description: |
        log out of user
      operationId: userLogout
      x-eov-operation-handler: api/controllers/user.controller
      tags:
        - Users
      parameters:
        - in: header
          name: X-Session-ID
          schema: 
            type: string
        - in: path
          name: id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: User is not logged in
        default:
          description: unexpected error happened, for example internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}/queue:
    put:
      description: |
        Update the users queue with the video specified by its id
      operationId: queueVideo
      x-eov-operation-handler: api/controllers/user.controller
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              properties:
                  videoid:
                    type: string
                    description: id of the video
            example:
              videoid: asdjald
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
        - in: header
          name: X-Session-ID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The updated queue array
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs to be logged in
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
    get:
      description: |
        Get your queue
      operationId: getQueue
      x-eov-operation-handler: api/controllers/user.controller
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: id of the user
          required: true
          schema:
            type: string
        - name: sort
          in: query
          required: true
          description: sort by
          schema:
            enum:
              - title
              - id
              - type
              - category
        - in: header
          name: X-Session-ID
          schema:
            type: string
          required: true
          description: session id
      responses:
        '200':
          description: An array of videos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs to be logged in
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  /videos:
    get:
      description: |
        Returns videos or tv shows by search with title
      operationId: getVideos
      x-eov-operation-handler: api/controllers/videos.controller
      tags:
        - Admin
      parameters:
        - name: title
          in: query
          description: title of the video or tv show
          required: false
          schema:
            type: string
        - in: header
          name: X-Session-ID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of videos
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Video'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs provide an api key
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: |
        Create new video data
      operationId: createVideo
      x-eov-operation-handler: api/controllers/videos.controller
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                titile:
                  type: string
                  example: Titanic
                category:
                  type: string
                  description: category of the video or tv show
                  example: romance
                type:
                  type: string
                  enum:
                    - Movie
                    - TV Show
                  example: Movie
            example:
              title: Titanic
              category: Romance
              type: Movie
      parameters:
        - in: header
          name: X-Admin-API-key
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Video created
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Value provided for type does not match any of the possible values
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs to provide an api key
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /videos/{id}:
    put:
      description: |
          Change video data
      operationId: changeVideo
      x-eov-operation-handler: api/controllers/videos.controller
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Video'
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: X-Admin-API-key
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Value provided for type does not match any of the possible values
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs to provide an api key
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Video with given id doesn't exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: |
          Delete video data
      operationId: deleteVideo
      x-eov-operation-handler: api/controllers/videos.controller
      tags:
        - Admin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: header
          name: X-Admin-API-key
          schema:
            type: string
          required: true
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: User needs to provide an api key
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Video with given id doesn't exist
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /videos/search:
    get:
      description: |
        Returns videos
      operationId: searchVideos
      x-eov-operation-handler: api/controllers/videos.controller
      tags:
        - Videos
      parameters:
        - name: title
          in: query
          description: title of the videos
          required: false
          schema:
            type: string
        - in: header
          name: X-Session-ID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of videos
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Video'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
components:
  schemas:
  
    User:
      description: A user object
      properties:
        id:
          type: string
          description: The id of the user
        username:
          type: string
          description: The username / email of the user
        password:
          type: string
          description: The password of  the user
      example:
        id: poaidsp
        username: mgeri
        password: password1234
        
    Video:
      description: A video object
      title: Video
      properties:
        id:
         type: string
         description: Unique identifier for the video generated by the database
        title:
          type: string
          description: Title of the video
        category:
          type: string
          description: The category / genre of the video or tv show
        type:
          type: string
          enum:
            - TV Show
            - Movie
      example:
        id: asdjald
        title: The matrix
        category: Action
        type: Movie
        
    Queue:
      description: An array of videos
      type: array
      items:
        $ref: '#/components/schemas/Video'
        
    Error:
      description: Default error, for example when internal server error occured
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: The http status code of the response
        message:
          type: string
      example:
        code: 500
        message: Internal server error
      